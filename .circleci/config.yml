version: 2

orbs:
  ruby: circleci/ruby@0.1.2
  rubocop: hanachin/rubocop@0.0.6
  postgres-rspec: sbc-orbs/postgres-rspec@0.0.28
  snyk: snyk/snyk@1.1.2
  coverage-reporter: codacy/coverage-reporter@13.5.3
  
jobs:
  build:
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          DATABASE_URL: postgres://postgres:password@localhost:5432/tech_cast_test
          RAILS_ENV: test
          REDIS_URL: redis://127.0.0.1:6379
      - image: circleci/postgres:11-alpine
      - image: circleci/redis:3.2-alpine
    steps:
      - checkout
    
      # Install dependencies for Ruby Gems
      - restore_cache:
          keys:
            - my-app-bundle-v1-{{ checksum "Gemfile.lock" }}
            - my-app-bundle-v1-

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler:2.1.4


      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - run:
          name: rubocop install
          command: gem install rubocop
          
      - save_cache:
          key: my-app-bundle-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Preparing database
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:create db:schema:load --trace

      # Run test suits
      #- run:
       #   name: Run rubocop in parallel
        #  command: bundle exec rubocop --parallel --config .rubocop.yml

      #- run:
       #   name: Run rspec in parallel
        #  command: |
         #   bundle exec rspec --profile 10 \
          #                   --format RspecJunitFormatter \
           #                  --out /tmp/test-results/rspec.xml \
            #                 --format progress \
             #                $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # Save artifacts
      - store_test_results:
          path: /tmp/test-results
          
  test:
    parallelism: 3
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          DATABASE_URL: postgres://postgres:password@localhost:5432/tech_cast_test
          RAILS_ENV: test
          REDIS_URL: redis://127.0.0.1:6379
      - image: circleci/postgres:11-alpine
      - image: circleci/redis:3.2-alpine 
       
  
      # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:create db:schema:load --trace
    
      - run: 
          name: Run Tests
          command: bin/rails test test
      
      - store_artifacts:
          path: coverage
      - run:
          name: Report Codacy
          command: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --project-token=ebda272a204c41c8b567ad47dbea1c13 -r coverage/coverage.xml
          
  snyk:
    docker:
      - image: circleci/ruby:2.7.0-node-browsers
        environment:
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          DATABASE_URL: postgres://postgres:password@localhost:5432/tech_cast_test
          RAILS_ENV: test
          REDIS_URL: redis://127.0.0.1:6379
      - image: circleci/postgres:11-alpine
      - image: circleci/redis:3.2-alpine
      
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install-snyk
          command: 'sudo npm install -g snyk'     
      - run: # run snyk help - test snyk is installed and working
          name: snyk-help
          command: snyk --help
      - run: # run snyk auth - authenticate snyk use environment variables to add token
          name: snyk auth
          command: snyk auth 35b58f17-e242-4059-b706-ed73c4044e0d
      - run: # run snyk test - run snyk test
          name: snyk test
          command: snyk test --all-projects --fail-on=upgradable
      - run:
          name: snyk monitor
          command: snyk monitor --all-projects

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:     # The name of our workflow is "build_and_test"
    jobs:             # The list of jobs we run as part of this workflow.
      - build         # Run build first.
      - test:         # Then run test,
          requires:   # Test requires that build passes for it to run.
            - build   # Finally, run the build job.
      - snyk
